// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/qorganbek/kwaka_test_assignment/internal/entity"
)

// MockWeather is a mock of Weather interface.
type MockWeather struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherMockRecorder
}

// MockWeatherMockRecorder is the mock recorder for MockWeather.
type MockWeatherMockRecorder struct {
	mock *MockWeather
}

// NewMockWeather creates a new mock instance.
func NewMockWeather(ctrl *gomock.Controller) *MockWeather {
	mock := &MockWeather{ctrl: ctrl}
	mock.recorder = &MockWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeather) EXPECT() *MockWeatherMockRecorder {
	return m.recorder
}

// CreateWeather mocks base method.
func (m *MockWeather) CreateWeather(location string) (entity.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWeather", location)
	ret0, _ := ret[0].(entity.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWeather indicates an expected call of CreateWeather.
func (mr *MockWeatherMockRecorder) CreateWeather(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWeather", reflect.TypeOf((*MockWeather)(nil).CreateWeather), location)
}

// GetWeather mocks base method.
func (m *MockWeather) GetWeather(location string) (entity.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeather", location)
	ret0, _ := ret[0].(entity.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather.
func (mr *MockWeatherMockRecorder) GetWeather(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockWeather)(nil).GetWeather), location)
}

// UpdateWeather mocks base method.
func (m *MockWeather) UpdateWeather(location string, input entity.UpdateWeather) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWeather", location, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWeather indicates an expected call of UpdateWeather.
func (mr *MockWeatherMockRecorder) UpdateWeather(location, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWeather", reflect.TypeOf((*MockWeather)(nil).UpdateWeather), location, input)
}
